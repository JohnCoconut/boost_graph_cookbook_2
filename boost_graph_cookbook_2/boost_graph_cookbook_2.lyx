#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{tikz}
\usepackage{tkz-graph}
\usepackage{pgf}
\usetikzlibrary{arrows,automata}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Boost.Graph Cookbook 2: Algorithms
\end_layout

\begin_layout Author
John Zhang Zongren
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename title_graph.svg
	lyxscale 50
	width 50text%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This is 'Boost.Graph Cookbook 2: Algorithms' version 0.1.
\end_layout

\begin_layout Subsection
Why this tutorial
\end_layout

\begin_layout Standard
[Text from John here]
\end_layout

\begin_layout Subsection
Tutorial style
\end_layout

\begin_layout Paragraph
Readable for beginners
\end_layout

\begin_layout Standard
This tutorial is aimed at the beginner programmer.
 This tutorial is intended to take the reader to the level of understanding
 the book 
\begin_inset CommandInset citation
LatexCommand cite
key "siek2001boost"

\end_inset

 and the Boost.Graph website require.
 It is about basic graph manipulation, not the more advanced graph algorithms.
 
\end_layout

\begin_layout Paragraph
High verbosity
\end_layout

\begin_layout Standard
This tutorial is intended to be as verbose, such that a beginner should
 be able to follow every step, from reading the tutorial from beginning
 to end chronologically.
 Especially in the earlier chapters, the rationale behind the code presented
 is given, including references to the literature.
 Chapters marked with '▶' are optional, less verbose and bring no new informatio
n to the storyline.
 
\end_layout

\begin_layout Paragraph
Repetitiveness
\end_layout

\begin_layout Standard
This tutorial is intended to be as repetitive, such that a beginner can
 spot the patterns in the code snippets their increasing complexity.
 Extending code from this tutorial should be as easy as extending the patterns.
\end_layout

\begin_layout Paragraph
Index
\end_layout

\begin_layout Standard
In the index, I did first put all my long-named functions there literally,
 but this resulted in a very sloppy layout.
 Instead, the function 'do_something' can be found as 'Do something' in
 the index.
 On the other hand, STL and Boost functions like 'std::do_something' and
 'boost::do_something' can be found as such in the index.
\end_layout

\begin_layout Subsection
Coding style
\end_layout

\begin_layout Paragraph
Concept
\end_layout

\begin_layout Standard
For every concept, I will show
\end_layout

\begin_layout Itemize
a function that achieves a goal, for example `create_empty_undirected_graph'
\end_layout

\begin_layout Itemize
a test case
\begin_inset Index idx
status open

\begin_layout Plain Layout
test case
\end_layout

\end_inset

 of that function, that demonstrates how to use the function, for example
 `create_empty_undirected_graph_test'
\end_layout

\begin_layout Paragraph*
C++14 
\end_layout

\begin_layout Standard
All coding snippets are taken from compiled and tested C++14 code.
 I chose to use C++14 because it was available to me on all local and remote
 computers.
 Next to this, it makes code even shorter then just C++11.
 
\end_layout

\begin_layout Paragraph
Coding standard
\end_layout

\begin_layout Standard
I use the coding style from the Core C++ Guidelines.
 At the time of this writing, the Core C++ Guidelines were still in early
 development, so I can only hope the conventions I then chose to follow
 are still Good Ideas.
\end_layout

\begin_layout Paragraph
No comments in code
\end_layout

\begin_layout Standard
It is important to add comments to code.
 In this tutorial, however, I have chosen not to put comments in code, as
 I already describe the function in the tutorial its text.
 This way, it prevents me from saying the same things twice.
\end_layout

\begin_layout Paragraph
Trade-off between generic code and readability
\end_layout

\begin_layout Standard
It is good to write generic code.
 In this tutorial, however, I have chosen my functions to have no templated
 arguments for conciseness and readability.
 For example, a vertex name is std::string, the type for if a vertex is
 selected is a boolean, and the custom vertex type is of type `my_custom_vertex'.
 I think these choices are reasonable and that the resulting increase in
 readability is worth it.
\end_layout

\begin_layout Paragraph
Long function names
\end_layout

\begin_layout Standard
I enjoy to show concepts by putting those in (long-named) functions.
 These functions sometimes border the trivial, by, for example, only calling
 a single Boost.Graph function.
 On the other hand, these functions have more English-sounding names, resulting
 in demonstration code that is readable.
 Additionally, they explicitly mention their return type (in a simpler way),
 which may be considered informative.
\end_layout

\begin_layout Paragraph
Long function names and readability
\end_layout

\begin_layout Standard
Due to my long function names and the limitation of ≈50 characters per line,
 sometimes the code does get to look a bit awkward.
 I am sorry for this.
\end_layout

\begin_layout Paragraph
Use of auto
\end_layout

\begin_layout Standard
I prefer to use the keyword auto over doubling the lines of code for using
 statements.
 Often the `do' functions return an explicit data type, these can be used
 for reference.
 Sometime I deduce the return type using decltype and a function with the
 same return type.
 When C++17 gets accessible, I will use `decltype(auto)'
\begin_inset Index idx
status open

\begin_layout Plain Layout
decltype(auto)
\end_layout

\end_inset

.
 If you really want to know a type, you can use the `get_type_name' function
 (chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:get_type_name"

\end_inset

).
 
\end_layout

\begin_layout Subparagraph
Explicit use of namespaces
\end_layout

\begin_layout Standard
On the other hand, I am explicit in the namespaces of functions and classes
 I use, so to distinguish between types like `std::array' and `boost::array'.
 Some functions (for example, `get'
\begin_inset Index idx
status open

\begin_layout Plain Layout
get
\end_layout

\end_inset

) reside in the namespace of the graph to work on.
 In this tutorial, this is in the global namespace.
 Thus, I will write `get', instead of `boost::get'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::get does not exist
\end_layout

\end_inset

, as the latter does not compile.
\end_layout

\begin_layout Paragraph
Use of STL algorithms
\end_layout

\begin_layout Standard
I try to use STL algorithms wherever I can.
 Also you should prefer algorithm calls over hand-written for-loops (
\begin_inset CommandInset citation
LatexCommand cite
key "stroustrup1997"

\end_inset

 chapter 18.12.1, 
\begin_inset CommandInset citation
LatexCommand cite
key "meyers2005effective"

\end_inset

 item 43).
 Sometimes using these algorithms becomes a burden on the lines of code.
 This is because in C++11, a lambda function argument (use by the algorithm)
 must have its data type specified.
 It may take multiple lines of `using' statements being able to do so.
 In C++14 one can use `auto' there as well.
 So, only if it shortens the number of lines significantly, I use raw for-loops,
 even though you shouldn't.
\end_layout

\begin_layout Paragraph
Re-use of functions
\end_layout

\begin_layout Standard
The functions I develop in this tutorial are re-used from that moment on.
 This improves to readability of the code and decreases the number of lines.
\end_layout

\begin_layout Paragraph
Tested to compile
\end_layout

\begin_layout Standard
All functions in this tutorial are tested to compile using Travis CI in
 both debug and release mode.
 
\end_layout

\begin_layout Paragraph
Tested to work
\end_layout

\begin_layout Standard
All functions in this tutorial are tested, using the Boost.Test library.
 Travis CI calls these tests after each push to the repository.
\end_layout

\begin_layout Paragraph
Availability
\end_layout

\begin_layout Standard
The code, as well as this tutorial, can be downloaded from the GitHub at
 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

www.github.com/richelbilderbeek/boost_graph_cookbook_2
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
License
\end_layout

\begin_layout Standard
This tutorial is licensed under Creative Commons license 4.0.
 All C++ code is licensed under GPL 3.0.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename CC-BY-SA_icon.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creative Commons license 4.0
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Feedback
\end_layout

\begin_layout Standard
This tutorial is not intended to be perfect yet.
 For that, I need help and feedback from the community.
 All referenced feedback is welcome, as well as any constructive feedback.
 
\end_layout

\begin_layout Standard
I have tried hard to strictly follow the style as described above.
 If you find I deviated from these decisions somewhere, I would be grateful
 if you'd let know.
 Next to this, there are some sections that need to be coded or have its
 code improved.
 
\end_layout

\begin_layout Subsection
Acknowledgements
\end_layout

\begin_layout Standard
These are users that improved this tutorial and/or the code behind this
 tutorial, in chronological order:
\end_layout

\begin_layout Itemize
Richel Bilderbeek
\end_layout

\begin_layout Subsection
Outline
\end_layout

\begin_layout Standard
The chapters of this tutorial are also like a well-connected graph.
 To allow for quicker learners to skim chapters, or for beginners looking
 to find the patterns.
\end_layout

\begin_layout Standard
The distinction between the chapter is in the type of edges and vertices.
 They can have:
\end_layout

\begin_layout Itemize
no properties: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Building-graphs-without-properties"

\end_inset


\end_layout

\begin_layout Itemize
have a bundled property: see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Building-graphs-with-bundled-vertices"

\end_inset


\end_layout

\begin_layout Standard
Pivotal chapters are chapters like `Finding the first vertex with ...', as
 this opens up the door to finding a vertex and manipulating it.
\end_layout

\begin_layout Standard
All chapters have a rather similar structure in themselves, as depicted
 in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-relations-between-subchapters"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways true
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_tutorial_subchapters_graph.svg
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The relations between sub-chapters
\begin_inset CommandInset label
LatexCommand label
name "fig:The-relations-between-subchapters"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are also some bonus chapters, that I have labeled with a '▶'.
 These chapters are added I needed these functions myself and adding them
 would not hurt.
 Just feel free to skip them, as there will be less theory explained.
\end_layout

\begin_layout Section
Graphs without properties
\begin_inset CommandInset label
LatexCommand label
name "sec:Building-graphs-without-properties"

\end_inset


\end_layout

\begin_layout Standard
Boost.Graph is about creating graphs.
 In this chapter we create the simplest of graphs, in which edges and nodes
 have no properties (e.g.
 having a name).
 
\end_layout

\begin_layout Standard
Still, there are two types of graphs that can be constructed: undirected
 and directed graphs.
 The difference between directed and undirected graphs is in the edges:
 in an undirected graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
undirected graph
\end_layout

\end_inset

, an edge connects two vertices without any directionality, as displayed
 in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:undirected_graph_example"

\end_inset

.
 In a directed graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
directed graph
\end_layout

\end_inset

, an edge goes from a certain vertex, its source, to another (which may
 actually be the same), its target.
 A directed graph is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:directed_graph_example"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz 
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick] 
\end_layout

\begin_layout Plain Layout

  (0,0) node[draw=black,fill=white,shape=circle,text=white] {} 
\end_layout

\begin_layout Plain Layout

    -- (5,2) node[draw=black,fill=white,shape=circle,text=white] {} 
\end_layout

\begin_layout Plain Layout

    -- (10,1) node[draw=black,fill=white,shape=circle,text=white] {} 
\end_layout

\begin_layout Plain Layout

;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Example of an undirected graph
\begin_inset CommandInset label
LatexCommand label
name "fig:undirected_graph_example"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}   
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{ 
\end_layout

\begin_layout Plain Layout

  VertexStyle/.append style = {draw=black,fill=white,shape=circle,text=white},
\end_layout

\begin_layout Plain Layout

  EdgeStyle/.append style = {->, bend left} }
\end_layout

\begin_layout Plain Layout


\backslash
SetGraphUnit{5}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex{A}   
\end_layout

\begin_layout Plain Layout


\backslash
EA(A){B}   
\end_layout

\begin_layout Plain Layout


\backslash
EA(B){C}   
\end_layout

\begin_layout Plain Layout


\backslash
Edge[](A)(B)   
\end_layout

\begin_layout Plain Layout


\backslash
Edge[](B)(A)   
\end_layout

\begin_layout Plain Layout


\backslash
Loop[dist = 4cm, dir = NO](A.west)
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{EdgeStyle/.append style = {bend left = 0}}
\end_layout

\begin_layout Plain Layout


\backslash
Edge[](C)(B)   
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Example of a directed graph
\begin_inset CommandInset label
LatexCommand label
name "fig:directed_graph_example"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
From such graphs, there are some things we can do.
 
\end_layout

\begin_layout Itemize
[list of functions here]
\end_layout

\begin_layout Subsection
Create a direct-neighbour subgraph from a vertex descriptor
\begin_inset CommandInset label
LatexCommand label
name "subsec:create_direct_neighbour_subgraph"

\end_inset


\end_layout

\begin_layout Standard
Suppose you have a vertex of interest its vertex descriptor.
 Let's say you want to get a subgraph of that vertex and its direct neighbours
 only.
 This means that all vertices of that subgraph are adjacent vertices and
 that the edges go either from focal vertex to its neighbours, or from adjacent
 vertex to adjacent neighbour.
\end_layout

\begin_layout Standard
Here is the `create_direct_neighbour_subgraph' code:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_direct_neighbour_subgraph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Get the direct-neighbour subgraph from a vertex descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create direct-neighbour subgraph
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_direct_neighbour_subgraph"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This demonstration code shows that the direct-neighbour graph of each vertex
 of a 
\begin_inset Formula $K_{2}$
\end_inset

 graphs is ...
 a 
\begin_inset Formula $K_{2}$
\end_inset

 graph!
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_direct_neighbour_subgraph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demo of the `create_direct_neighbour_subgraph' function
\begin_inset CommandInset label
LatexCommand label
name "alg:create_direct_neighbour_subgraph_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this algorithm works on both undirected and directional graphs.
 If the graph is directional, only the out edges will be copied.
 To also copy the vertices connected with inward edges, use 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:create_direct_neighbour_subgraph_including_in_edges"

\end_inset


\end_layout

\begin_layout Subsection
Create a direct-neighbour subgraph from a vertex descriptor including inward
 edges
\begin_inset CommandInset label
LatexCommand label
name "subsec:create_direct_neighbour_subgraph_including_in_edges"

\end_inset


\end_layout

\begin_layout Standard
Too bad, this algorithm does not work yet.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_direct_neighbour_subgraph_including_in_edges.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Get the direct-neighbour subgraph from a vertex descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create direct-neighbour subgraph_including_in_edges
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_direct_neighbour_subgraph_including_in_edges"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Creating all direct-neighbour subgraphs from a graph without properties
\begin_inset CommandInset label
LatexCommand label
name "subsec:create_all_direct_neighbour_subgraphs"

\end_inset


\end_layout

\begin_layout Standard
Using the previous function, it is easy to create all direct-neighbour subgraphs
 from a graph without properties:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_all_direct_neighbour_subgraphs.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Create all direct-neighbour subgraphs from a graph without properties
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create all direct-neighbour subgraphs
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:create_all_direct_neighbour_subgraphs"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This demonstration code shows that all two direct-neighbour graphs of a
 
\begin_inset Formula $K_{2}$
\end_inset

 graphs are ...
 
\begin_inset Formula $K_{2}$
\end_inset

 graphs!
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_all_direct_neighbour_subgraphs_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demo of the `create_all_direct_neighbour_subgraphs' function
\begin_inset CommandInset label
LatexCommand label
name "alg:create_all_direct_neighbour_subgraphs_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Count the number of connected components in an directed graph
\begin_inset CommandInset label
LatexCommand label
name "subsec:count_directed_graph_connected_components"

\end_inset


\end_layout

\begin_layout Standard
A directed graph may consist out of two components, that are connected within
 each, but unconnected between them.
 Take for example, a graph of two isolated edges, with four vertices.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz 
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick] 
\end_layout

\begin_layout Plain Layout

  (0,0) node[draw=black,fill=white,shape=circle,text=white] {} 
\end_layout

\begin_layout Plain Layout

    -> (5,2) node[draw=black,fill=white,shape=circle,text=white] {} 
\end_layout

\begin_layout Plain Layout

    -> (3,4) node[draw=black,fill=white,shape=circle,text=white] {} 
\end_layout

\begin_layout Plain Layout

    -> (0,0) node[draw=black,fill=white,shape=circle,text=white] {} 
\end_layout

\begin_layout Plain Layout

(6,0) node[draw=black,fill=white,shape=circle,text=white] {} 
\end_layout

\begin_layout Plain Layout

    -> (10,2) node[draw=black,fill=white,shape=circle,text=white] {} 
\end_layout

\begin_layout Plain Layout

    -> (8,4) node[draw=black,fill=white,shape=circle,text=white] {} 
\end_layout

\begin_layout Plain Layout

    -> (6,0) node[draw=black,fill=white,shape=circle,text=white] {} 
\end_layout

\begin_layout Plain Layout

;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Example of a directed graph with two components
\begin_inset CommandInset label
LatexCommand label
name "fig:count_directed_graph_connected_components"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This algorithm counts the number of connected components:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "count_directed_graph_connected_components.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Count the number of connected components
\begin_inset Index idx
status open

\begin_layout Plain Layout
Count connected components
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:count_directed_graph_connected_components"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The complexity of this algorithm is 
\begin_inset Formula $O(\left|V\right|+\left|E\right|)$
\end_inset

.
\end_layout

\begin_layout Standard
This demonstration code shows that two solitary edges are correctly counted
 as being two components:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "count_directed_graph_connected_components_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demo of the `count_directed_graph_connected_components' function
\begin_inset CommandInset label
LatexCommand label
name "alg:count_directed_graph_connected_components_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Count the number of connected components in an undirected graph
\begin_inset CommandInset label
LatexCommand label
name "subsec:count_undirected_graph_connected_components"

\end_inset


\end_layout

\begin_layout Standard
An undirected graph may consist out of two components, that are connect
 within each, but unconnected between them.
 Take for example, a graph of two isolated edges, with four vertices.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz 
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick] 
\end_layout

\begin_layout Plain Layout

  (0,0) node[draw=black,fill=white,shape=circle,text=white] {} 
\end_layout

\begin_layout Plain Layout

    -- (5,2) node[draw=black,fill=white,shape=circle,text=white] {} 
\end_layout

\begin_layout Plain Layout

(6,0) node[draw=black,fill=white,shape=circle,text=white] {} 
\end_layout

\begin_layout Plain Layout

    -- (10,2) node[draw=black,fill=white,shape=circle,text=white] {} 
\end_layout

\begin_layout Plain Layout

;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Example of an undirected graph with two components
\begin_inset CommandInset label
LatexCommand label
name "fig:count_undirected_graph_connected_components"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This algorithm counts the number of connected components:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "count_undirected_graph_connected_components.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Count the number of connected components
\begin_inset Index idx
status open

\begin_layout Plain Layout
Count connected components
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:count_undirected_graph_connected_components"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The complexity of this algorithm is 
\begin_inset Formula $O(\left|V\right|+\left|E\right|)$
\end_inset

.
\end_layout

\begin_layout Standard
This demonstration code shows that two solitary edges are correctly counted
 as being two components:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "count_undirected_graph_connected_components_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demo of the `count_undirected_graph_connected_components' function
\begin_inset CommandInset label
LatexCommand label
name "alg:count_undirected_graph_connected_components_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Count the number of levels in an undirected graph
\begin_inset CommandInset label
LatexCommand label
name "subsec:count_undirected_graph_levels"

\end_inset


\end_layout

\begin_layout Standard
Graphs can have a hierarchical structure.
 From a starting vertex, the number of levels can be counted.
 A graph of one vertex has zero levels.
 A graph with one edge has one level.
 A linear graph of three vertices and two edges has one or two levels, depending
 on the starting vertex.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz 
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick] 
\end_layout

\begin_layout Plain Layout

  (0,0) node[draw=black,fill=white,shape=circle,text=white] {} 
\end_layout

\begin_layout Plain Layout

    -- (5,2) node[draw=black,fill=white,shape=circle,text=white] {} 
\end_layout

\begin_layout Plain Layout

(6,0) node[draw=black,fill=white,shape=circle,text=white] {} 
\end_layout

\begin_layout Plain Layout

    -- (10,2) node[draw=black,fill=white,shape=circle,text=white] {} 
\end_layout

\begin_layout Plain Layout

;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Example of an undirected graph with two components
\begin_inset CommandInset label
LatexCommand label
name "fig:count_undirected_graph_levels"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This algorithm counts the number of levels in an undirected graph, starting
 at a certain vertex.
 
\end_layout

\begin_layout Standard
It does so, by collecting the neighbours of the traversed vertices.
 Each sweep, all neighbours of traversed neighbours are added to a set of
 known vertices.
 As long as vertices can be added, the algorithm continues.
 If no vertices can be added, the number of level equals the number of sweeps.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "count_undirected_graph_levels.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Count the number of levels in an undirected graph 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Count undirected graph levels
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:count_undirected_graph_levels"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This demonstration code shows the number of levels from a certain vertex,
 while adding edges to form a linear graph.
 The vertex, when still without edges, has zero levels.
 After adding one edge, the graph has one level, etc.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "count_undirected_graph_levels_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demo of the `count_undirected_graph_levels' function
\begin_inset CommandInset label
LatexCommand label
name "alg:count_undirected_graph_levels_demo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Graphs with bundled vertices
\begin_inset CommandInset label
LatexCommand label
name "sec:Building-graphs-with-bundled-vertices"

\end_inset


\end_layout

\begin_layout Standard
Up until now, the graphs created have had edges and vertices without any
 properties.
 In this chapter, graphs will be created, in which the vertices can have
 a bundled `my_bundled_vertex' type
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
I do not intend to be original in naming my data types
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Subsection
The bundled vertex class
\begin_inset CommandInset label
LatexCommand label
name "subsec:my_bundled_vertex"

\end_inset


\end_layout

\begin_layout Standard
Before creating an empty graph with bundled vertices, that bundled vertex
 class must be created.
 In this tutorial, it is called `my_bundled_vertex'.
 `my_bundled_vertex' is a class that is nonsensical, but it can be replaced
 by any other class type.
\end_layout

\begin_layout Standard
Here I will show the header file of `my_bundled_vertex', as the implementation
 of it is not important:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "my_bundled_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Declaration of my_bundled_vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
my_bundled_vertex
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_bundled_vertex.h
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_vertex declaration
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Declaration, my_bundled_vertex 
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:my_bundled_vertex_h"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
`my_bundled_vertex' is a class that has multiple properties: 
\end_layout

\begin_layout Itemize
It has four public member variables: the double `m_x' (`m_
\begin_inset Index idx
status open

\begin_layout Plain Layout
m_
\end_layout

\end_inset

' stands for member
\begin_inset Index idx
status open

\begin_layout Plain Layout
member
\end_layout

\end_inset

), the double `m_y', the std::string m_name and the std::string m_description.
 These variables must be public
\end_layout

\begin_layout Itemize
It has a default constructor
\end_layout

\begin_layout Itemize
It is copyable
\end_layout

\begin_layout Itemize
It is comparable for equality (it has operator==), which is needed for searching
\end_layout

\begin_layout Standard
`my_bundled_vertex' does not have to have the stream operators defined for
 file I/O, as this goes via the public member variables.
\end_layout

\begin_layout Subsection
[Algorithms on graphs of bundled vertices]
\end_layout

\begin_layout Standard
[Algorithms on graphs of bundled vertices]
\end_layout

\begin_layout Section
Building graphs with bundled edges and vertices
\end_layout

\begin_layout Standard
Up until now, the graphs created have had only bundled vertices.
 In this chapter, graphs will be created, in which both the edges and vertices
 have a bundled `my_bundled_edge' and `my_bundled_edge' type
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
I do not intend to be original in naming my data types
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
The bundled edge class
\begin_inset CommandInset label
LatexCommand label
name "subsec:my_bundled_edge"

\end_inset


\end_layout

\begin_layout Standard
In this example, I create a `my_bundled_edge' class.
 Here I will show the header file of it, as the implementation of it is
 not important yet.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "my_bundled_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Declaration of my_bundled_edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
my_bundled_edge
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_bundled_edge.h
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_bundled_edge declaration
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Declaration, my_bundled_edge
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:my_bundled_edge_h"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
my_bundled_edge is a class that has multiple properties: two doubles `m_width'
 (`m_
\begin_inset Index idx
status open

\begin_layout Plain Layout
m_
\end_layout

\end_inset

' stands for member
\begin_inset Index idx
status open

\begin_layout Plain Layout
member
\end_layout

\end_inset

) and `m_height', and two std::strings m_name and m_description.`my_bundled_edge'
 is copyable, but cannot trivially be converted to a `std::string.' `my_bundled_e
dge' is comparable for equality (that is, operator== is defined).
\end_layout

\begin_layout Standard
`my_bundled_edge' does not have to have the stream operators defined for
 file I/O, as this goes via the public member variables.
\end_layout

\begin_layout Subsection
[some algorithms]
\end_layout

\begin_layout Standard
Some algorithms
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "boost_graph_cookbook_2"
options "plain"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex
type "idx"

\end_inset


\end_layout

\end_body
\end_document
