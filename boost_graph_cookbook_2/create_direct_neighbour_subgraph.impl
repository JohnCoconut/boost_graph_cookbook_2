#include <map>
#include <boost/graph/adjacency_list.hpp>

template <typename graph, typename vertex_descriptor>
graph create_direct_neighbour_subgraph(
  const vertex_descriptor& vd,
  const graph& g
)
{
  graph h;

  std::map<vertex_descriptor,vertex_descriptor> m;
  {
    const auto vd_h = boost::add_vertex(h);
    m.insert(std::make_pair(vd,vd_h));
  }
  //Copy vertices
  {
    const auto vdsi = boost::adjacent_vertices(vd, g);
    for (auto i = vdsi.first; i != vdsi.second; ++i)
    {
      if (m.find(*i) == m.end())
      {
        const auto vd_h = boost::add_vertex(h);
        m.insert(std::make_pair(*i, vd_h));
      }
    }
  }
  //Copy edges
  {
    const auto eip = edges(g);
    const auto j = eip.second;
    for (auto i = eip.first; i!=j; ++i)
    {
      const auto vd_from = source(*i, g);
      const auto vd_to = target(*i, g);
      if (m.find(vd_from) == std::end(m)) continue;
      if (m.find(vd_to) == std::end(m)) continue;
      boost::add_edge(m[vd_from],m[vd_to], h);
    }
  }
  return h;
}
